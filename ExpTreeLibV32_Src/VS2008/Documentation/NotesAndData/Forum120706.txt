<p>I have a&nbsp;Form which, under some circumstances, fires off a New BackgroundWorker known as BGW2. Handlers exist for DoWork, ProgressChanged, and RunWorkerCompleted. Prior to firing off a BackgroundWorker, the Form Resets a ManualResetEvent (Event2). This ManualResetEvent is Set in the RunWorkerComplete event Handler. It is also Set in DoWork when sender.<span style="font-size:small;">CancellationPending is detected. The following code is in the DoWork Handler:<br /></span></p><pre class="prettyprint lang-vb">            If ThisWorker.CancellationPending Then
                e.Cancel = True
                e.Result = Nothing
                Event2.Set()
                Exit Sub
            End If
</pre><p><span style="font-size:small;">In the RunWorkerCompleted Handler I have the following which will always be executed:<br /></span></p><pre class="prettyprint lang-vb">        Event2.Set()
        BGW2 = Nothing
</pre><p><span style="font-size:small;">Because of user input or application program code, the code block that <em>may</em> start the BackgroundWorker&nbsp;may be entered while the BackgroundWorker is running. At entry to that code block, I execute the following:<br /></span></p><pre class="prettyprint lang-vb">        If BGW2 IsNot Nothing Then
            BGW2.CancelAsync()
            Event2.WaitOne()
            BGW2 = Nothing          
        End If
</pre><p><strong>Problem:</strong> In cases where the Form containing all of this is the Main application Form, all works as expected (or at least causes no visible problems). However, in cases where the Form is a Secondary Form and is created and Disposed multiple times, sooner or later the Form will hang at the WaitOne statement as the Form is first Loaded for the second to ... n time. Note that the problem may not show up the second time, but sometimes does. It never occurs on the first creation or display of the Form.</p><p><strong>Additonal Information:</strong> The Form consists of a User Control wrapping a TreeView, and a ListView. When a TreeNode is Selected in the TreeView an Event is Raised which is Handled by the Form. In that Event Handler, the ListView is populated with Items based on information passed to it in a EventArgs that is created based on which TreeNode was Selected. If the number of ListViewItems that should be created exceeds a limit, then the BackgroundWorker is called to obtain information which the RunWorkerCompleted will use to fill in missing info in the ListViewItems.</p><p>Because of the nature of the UserControl, a Selection Event will be Raised at Form Creation. The TreeNode Selected is such that the BackGroundWorker will always be invoked. That is, the TreeView and the ListView will be populated before the Form is actually shown (frm.ShowDialog). At Form_Load, the application will always change the content of the TreeView and cause another Selection Event to be Raised. That new selection may or may not cause the BackgroundWorker to be Created and Run.&nbsp;In my test scenarios, &nbsp;there is no need to run the BackgroundWorker&nbsp;for this second, application directed, selection. In other words, there is no chance (tested and confirmed) that BGW2 will be assigned a value to process this second selection. Any BackgroundWorker left assigned to BGW2 is from the first, automatic, selection. </p><p></p>