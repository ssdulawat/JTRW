//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PCTrackerEntities : DbContext
    {
        public PCTrackerEntities()
            : base("name=PCTrackerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AppSetting> AppSettings { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<CheckVersion> CheckVersions { get; set; }
        public virtual DbSet<EmployeeDetail> EmployeeDetails { get; set; }
        public virtual DbSet<InOut> InOuts { get; set; }
        public virtual DbSet<OffLineActivity> OffLineActivities { get; set; }
    
        public virtual int EmployeeDetail_Insert(string name, string address, string mobile, string designation, string userName, string password, string emailAddress, string userType, string billableRate, Nullable<bool> activeUser, string firstName, string lastName)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var billableRateParameter = billableRate != null ?
                new ObjectParameter("BillableRate", billableRate) :
                new ObjectParameter("BillableRate", typeof(string));
    
            var activeUserParameter = activeUser.HasValue ?
                new ObjectParameter("ActiveUser", activeUser) :
                new ObjectParameter("ActiveUser", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeDetail_Insert", nameParameter, addressParameter, mobileParameter, designationParameter, userNameParameter, passwordParameter, emailAddressParameter, userTypeParameter, billableRateParameter, activeUserParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int EmployeeDetail_Update(Nullable<long> employeeDetailsId, string name, string address, string mobile, string designation, string userName, string password, string emailAddress, string billableRate, Nullable<bool> activeUser, string firstName, string lastName)
        {
            var employeeDetailsIdParameter = employeeDetailsId.HasValue ?
                new ObjectParameter("EmployeeDetailsId", employeeDetailsId) :
                new ObjectParameter("EmployeeDetailsId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var billableRateParameter = billableRate != null ?
                new ObjectParameter("BillableRate", billableRate) :
                new ObjectParameter("BillableRate", typeof(string));
    
            var activeUserParameter = activeUser.HasValue ?
                new ObjectParameter("ActiveUser", activeUser) :
                new ObjectParameter("ActiveUser", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeDetail_Update", employeeDetailsIdParameter, nameParameter, addressParameter, mobileParameter, designationParameter, userNameParameter, passwordParameter, emailAddressParameter, billableRateParameter, activeUserParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int User_Update(Nullable<System.TimeSpan> singIn, Nullable<System.TimeSpan> singOut, Nullable<double> hoursWorked, Nullable<System.DateTime> date, string comment, string logOutComment, Nullable<long> attendanceId)
        {
            var singInParameter = singIn.HasValue ?
                new ObjectParameter("SingIn", singIn) :
                new ObjectParameter("SingIn", typeof(System.TimeSpan));
    
            var singOutParameter = singOut.HasValue ?
                new ObjectParameter("SingOut", singOut) :
                new ObjectParameter("SingOut", typeof(System.TimeSpan));
    
            var hoursWorkedParameter = hoursWorked.HasValue ?
                new ObjectParameter("HoursWorked", hoursWorked) :
                new ObjectParameter("HoursWorked", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var logOutCommentParameter = logOutComment != null ?
                new ObjectParameter("LogOutComment", logOutComment) :
                new ObjectParameter("LogOutComment", typeof(string));
    
            var attendanceIdParameter = attendanceId.HasValue ?
                new ObjectParameter("AttendanceId", attendanceId) :
                new ObjectParameter("AttendanceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("User_Update", singInParameter, singOutParameter, hoursWorkedParameter, dateParameter, commentParameter, logOutCommentParameter, attendanceIdParameter);
        }
    }
}
